const abi = [
	{
		"anonymous": false,
		"inputs": [
			{
				"components": [
					{
						"internalType": "int256",
						"name": "numerator",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "denominator",
						"type": "int256"
					}
				],
				"indexed": true,
				"internalType": "struct NumberSum.Number",
				"name": "num",
				"type": "tuple"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			},
			{
				"components": [
					{
						"internalType": "int256",
						"name": "numerator",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "denominator",
						"type": "int256"
					}
				],
				"indexed": false,
				"internalType": "struct NumberSum.Number",
				"name": "numsum",
				"type": "tuple"
			},
			{
				"components": [
					{
						"internalType": "int256",
						"name": "numerator",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "denominator",
						"type": "int256"
					}
				],
				"indexed": false,
				"internalType": "struct NumberSum.Number",
				"name": "usersum",
				"type": "tuple"
			}
		],
		"name": "NumberAdded",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "getTotal",
		"outputs": [
			{
				"components": [
					{
						"internalType": "int256",
						"name": "numerator",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "denominator",
						"type": "int256"
					}
				],
				"internalType": "struct NumberSum.Number",
				"name": "total_",
				"type": "tuple"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getUsersCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "count",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"components": [
					{
						"internalType": "int256",
						"name": "numerator",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "denominator",
						"type": "int256"
					}
				],
				"internalType": "struct NumberSum.Number",
				"name": "number",
				"type": "tuple"
			}
		],
		"name": "inputNumber",
		"outputs": [
			{
				"components": [
					{
						"internalType": "int256",
						"name": "numerator",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "denominator",
						"type": "int256"
					}
				],
				"internalType": "struct NumberSum.Number",
				"name": "sum",
				"type": "tuple"
			},
			{
				"components": [
					{
						"internalType": "int256",
						"name": "numerator",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "denominator",
						"type": "int256"
					}
				],
				"internalType": "struct NumberSum.Number",
				"name": "userSum",
				"type": "tuple"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

const bytecode = "608060405234801561001057600080fd5b50610bba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063775a25e314610046578063a4a1e26314610064578063e7e23a9d14610082575b600080fd5b61004e6100b3565b60405161005b91906106b6565b60405180910390f35b61006c6100e1565b60405161007991906106ea565b60405180910390f35b61009c60048036038101906100979190610821565b6100ee565b6040516100aa92919061084e565b60405180910390f35b6100bb610654565b600060405180604001604052908160008201548152602001600182015481525050905090565b6000600480549050905090565b6100f6610654565b6100fe610654565b6000806000015403610128578260008082015181600001556020820151816001015590505061016b565b61015260006040518060400160405290816000820154815260200160018201548152505084610510565b6000808201518160000155602082015181600101559050505b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154036102115782600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050506102cf565b610278600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505084610510565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050505b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103dc576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b423373ffffffffffffffffffffffffffffffffffffffff168460405161040291906108cb565b60405180910390207f6485e611111a80fbb18476150e6ab9d97b75f03df91208865e649a23cc8368bb6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405161047a92919061095e565b60405180910390a46000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816040518060400160405290816000820154815260200160018201548152505091508060405180604001604052908160008201548152602001600182015481525050905091509150915091565b610518610654565b600061052484846105bb565b9050600061057c60008360000151121561054b578260000151610546906109b6565b610551565b82600001515b60008460200151121561057157836020015161056c906109b6565b610577565b83602001515b610624565b905060405180604001604052808284600001516105999190610a2d565b81526020018284602001516105ae9190610a2d565b8152509250505092915050565b6105c3610654565b6040518060400160405280836000015185602001516105e29190610a97565b846020015186600001516105f69190610a97565b6106009190610b0f565b8152602001836020015185602001516106199190610a97565b815250905092915050565b60005b6000821461064b57600082905082846106409190610b53565b925080935050610627565b82905092915050565b604051806040016040528060008152602001600081525090565b6000819050919050565b6106818161066e565b82525050565b60408201600082015161069d6000850182610678565b5060208201516106b06020850182610678565b50505050565b60006040820190506106cb6000830184610687565b92915050565b6000819050919050565b6106e4816106d1565b82525050565b60006020820190506106ff60008301846106db565b92915050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61076282610719565b810181811067ffffffffffffffff821117156107815761078061072a565b5b80604052505050565b6000610794610705565b90506107a08282610759565b919050565b6107ae8161066e565b81146107b957600080fd5b50565b6000813590506107cb816107a5565b92915050565b6000604082840312156107e7576107e6610714565b5b6107f1604061078a565b90506000610801848285016107bc565b6000830152506020610815848285016107bc565b60208301525092915050565b6000604082840312156108375761083661070f565b5b6000610845848285016107d1565b91505092915050565b60006080820190506108636000830185610687565b6108706040830184610687565b9392505050565b6108808161066e565b82525050565b60006108928383610877565b60208301905092915050565b6000820160008201516108b18482610886565b93505060208201516108c38482610886565b935050505050565b60006108d7828461089e565b60408201915081905092915050565b60008160001c9050919050565b6000819050919050565b600061091061090b836108e6565b6108f3565b9050919050565b60408201600080830154905061092c816108fd565b6109396000860182610678565b506001830154905061094a816108fd565b6109576020860182610678565b5050505050565b60006080820190506109736000830185610917565b6109806040830184610917565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c18261066e565b91507f800000000000000000000000000000000000000000000000000000000000000082036109f3576109f2610987565b5b816000039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a388261066e565b9150610a438361066e565b925082610a5357610a526109fe565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610a8c57610a8b610987565b5b828205905092915050565b6000610aa28261066e565b9150610aad8361066e565b9250828202610abb8161066e565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610af357610af2610987565b5b8282058414831517610b0857610b07610987565b5b5092915050565b6000610b1a8261066e565b9150610b258361066e565b925082820190508281121560008312168382126000841215161715610b4d57610b4c610987565b5b92915050565b6000610b5e8261066e565b9150610b698361066e565b925082610b7957610b786109fe565b5b82820790509291505056fea2646970667358221220d0249677d74c7bab22f87c1b8ebc6ea64b2b59df07a7cdace42cad7d296015cf64736f6c63430008130033"
const contractAddress = "0xa6ba4b0A855e420725D0e71a00C6E4bD21FF3F3E";

module.exports = {
  abi,
  bytecode, contractAddress
}